/* Two types of animations in CSS: Keyframes - Transition property */
/* Keyframes */
@keyframes moveInLeft {
  /* specify what i want to happen in each moment of time of the animation */
  /* start */
  0% {
    /* invisible */
    opacity: 0;
    /* Current position to -100px in x axis (move to left side) */
    transform: translateX(-10rem); }
  80% {
    /* 0 position to 20px in x axis (move to right side) */
    transform: translateX(1rem); }
  /* finish */
  100% {
    opacity: 1;
    /* translate 0 position */
    transform: translate(0); } }

@keyframes moveInRight {
  /* specify what i want to happen in each moment of time of the animation */
  /* start */
  0% {
    /* invisible */
    opacity: 0;
    /* Current position to -100px in x axis (move to left side) */
    transform: translateX(10rem); }
  80% {
    /* 0 position to 20px in x axis (move to right side) */
    transform: translateX(-1rem); }
  /* finish */
  100% {
    opacity: 1;
    /* translate 0 position */
    transform: translate(0); } }

@keyframes moveInBottom {
  0% {
    opacity: 0;
    transform: translateY(3rem); }
  100% {
    opacity: 1;
    transform: translate(0); } }

/* Universal selector for normalized the CSS in order to make a cross browser reset */
*,
*::after,
*::before {
  margin: 0;
  padding: 0;
  /* Inherit box-sizing: border-box from body element for each element insise body */
  box-sizing: inherit; }

html {
  /* default font-size is 16px */
  /* if font-size is specified in pixels then the user cant override the size manually in the browser settings  */
  /* font-size: 10px; */
  /* Is better practice use % based on default font-size (16px) (10px = 62.5% from 16px) */
  font-size: 62.5%; }

body {
  /* Change the box model so the borders and the paddings are no longer added to the total width or height that we specify for a box */
  /* without this, any paddings and borders are added to the height or the width of an element */
  box-sizing: border-box; }

body {
  font-family: "Lato", sans-serif;
  font-weight: 400;
  /* font-size: 16px; */
  line-height: 1.7;
  color: #777;
  padding: 3rem; }

.heading-primary {
  color: #fff;
  text-transform: uppercase;
  margin-bottom: 6rem; }
  .heading-primary--main {
    display: block;
    font-size: 6rem;
    font-weight: 400;
    letter-spacing: 3.5rem;
    /* Animation require two porperties to work */
    animation-name: moveInLeft;
    animation-duration: 2s;
    /* sets how an animation progresses through the duration of each cycle */
    animation-timing-function: ease-out;
    /* wait for 3s to start the animation */
    /* animation-delay: 3s; */
    /* animation happen three times */
    /* animation-iteration-count: 3; */ }
  .heading-primary--sub {
    display: block;
    font-size: 2rem;
    font-weight: 700;
    letter-spacing: 1.75rem;
    /* Animation require two porperties to work */
    /* animation-name: moveInRight;
  animation-duration: 2s;
  animation-timing-function: ease-out; */
    /* shorthand property */
    animation: moveInRight 2s ease-out; }

.heading-secondary {
  font-size: 3.5rem;
  text-transform: uppercase;
  font-weight: 700;
  display: inline-block;
  background-image: linear-gradient(to right, #7ed56f, #28b485);
  -webkit-background-clip: text;
  background-clip: text;
  color: transparent;
  letter-spacing: 2px;
  transition: all 0.2s; }
  .heading-secondary:hover {
    transform: skewY(2deg) skewX(15deg) scale(1.1);
    text-shadow: 0.5rem 1rem 2rem rgba(0, 0, 0, 0.2); }

.heading-tertiary {
  font-size: 1.6rem;
  font-weight: 700;
  text-transform: uppercase; }

.paragraph {
  font-size: 1.6rem; }
  .paragraph:not(:last-child) {
    margin-bottom: 3rem; }

.u-center-text {
  text-align: center; }

.u-margin-bottom-small {
  margin-bottom: 1.5rem; }

.u-margin-bottom-medium {
  margin-bottom: 4rem; }

.u-margin-bottom-big {
  margin-bottom: 8rem; }

/* The button is a component because it's certainly a building block and it's
reusable across the page, independent, works everywhere and we can use wherever we want on our page */
/* :link is pseudo-class -> special state of a selector, in this case when it is an anchor element */
/* visited when a user has visited a link (purple color default) */
.btn {
  /* state when click the button */
  /* pseudo-elements allow us to style certain parts of elements */
  /* after pseudo-element adds like a virtual element right after the element */
  /* add an element that looks exactly like the element but it's behind the element */ }
  .btn:link, .btn:visited {
    text-transform: uppercase;
    text-decoration: none;
    /* two values means top-bottom and left-right */
    padding: 1.5rem 4rem;
    display: inline-block;
    border-radius: 10rem;
    /* All the properties are enabled to be animated (in this case hover and active) */
    /* It's the initial state */
    transition: all 0.2s;
    position: relative;
    font-size: 1.6rem; }
  .btn:hover {
    transform: translateY(-0.3rem);
    /* first: offset in x direction, second: offset in y direction */
    /* third: blur, fourth: color */
    box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.2); }
    .btn:hover::after {
      transform: scaleX(1.4) scaleY(1.6);
      opacity: 0; }
  .btn:active {
    transform: translateY(-1px);
    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.2); }
  .btn--white {
    background-color: #fff;
    color: #777; }
    .btn--white::after {
      background-color: #fff; }
  .btn::after {
    /* always necessary */
    content: "";
    /* the after element is a child of element */
    display: inline-block;
    width: 100%;
    height: 100%;
    border-radius: 100px;
    position: absolute;
    top: 0;
    left: 0;
    z-index: -1;
    transition: all 0.4s; }
  .btn--animated {
    /* animation delay last property */
    animation: moveInBottom 0.5s ease-out 0.75s;
    /* styles up to 0%(in animation) before the animations start */
    animation-fill-mode: backwards; }

.btn-text:link, .btn-text:visited {
  font-size: 1.6rem;
  color: #55c57a;
  display: inline-block;
  text-decoration: none;
  border-bottom: 1px solid #55c57a;
  padding: 3px;
  transition: all 0.2s; }

.btn-text:hover {
  background-color: #55c57a;
  color: #fff;
  box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.15);
  transform: translateY(-2px); }

.btn-text:active {
  box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
  transform: translateY(0); }

.composition {
  position: relative; }
  .composition__photo {
    width: 55%;
    box-shadow: 0 1.5rem 4rem rgba(0, 0, 0, 0.4);
    border-radius: 2px;
    position: absolute;
    z-index: 10;
    transition: all 0.2s;
    outline-offset: 2rem; }
    .composition__photo--p1 {
      left: 0;
      top: -2rem; }
    .composition__photo--p2 {
      right: 0;
      top: 2rem; }
    .composition__photo--p3 {
      left: 20%;
      top: 10rem; }
    .composition__photo:hover {
      outline: 1.5rem solid #55c57a;
      transform: scale(1.05) translateY(-0.5rem);
      box-shadow: 0 2.5rem 4rem rgba(0, 0, 0, 0.5);
      z-index: 20; }
  .composition:hover .composition__photo:not(:hover) {
    transform: scale(0.9); }

.feature-box {
  background-color: rgba(255, 255, 255, 0.8);
  font-size: 1.5rem;
  padding: 2.5rem;
  text-align: center;
  border-radius: 3px;
  box-shadow: 0 1.5rem 4rem rgba(0, 0, 0, 0.15);
  transition: transform 0.3s; }
  .feature-box__icon {
    font-size: 6rem;
    margin-bottom: 0.5rem;
    display: inline-block;
    background-image: linear-gradient(to right, #7ed56f, #28b485);
    -webkit-background-clip: text;
    background-clip: text;
    color: transparent; }
  .feature-box:hover {
    transform: scale(1.03) translateY(-1.5rem); }

.row {
  max-width: 114rem;
  margin: 0 auto; }
  .row:not(:last-child) {
    margin-bottom: 8rem; }
  .row::after {
    content: "";
    display: table;
    clear: both; }
  .row [class^="col-"] {
    float: left; }
    .row [class^="col-"]:not(:last-child) {
      margin-right: 6rem; }
  .row .col-1-of-2 {
    width: calc((100% - 6rem) / 2); }
  .row .col-1-of-3 {
    width: calc((100% - 2 * 6rem) / 3); }
  .row .col-2-of-3 {
    width: calc( 2 * ((100% - 2 * 6rem) / 3) + 6rem); }
  .row .col-1-of-4 {
    width: calc((100% - 3 * 6rem) / 4); }
  .row .col-2-of-4 {
    width: calc( 2 * ((100% - 3 * 6rem) / 4) + 6rem); }
  .row .col-3-of-4 {
    width: calc( 3 * ((100% - 3 * 6rem) / 4) + (2 * 6rem)); }

/* header is a layout component because probably it will be in each page on the website  */
.header {
  /* 95% of thw viewport height */
  height: 95vh;
  /* linear gradient use the back-image property */
  /* to right bottom css understand that it should begin since left up */
  /* The fourth parameter is the opacity (0.8) in order to see the background image */
  background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.8), rgba(40, 180, 133, 0.8)), url(../img/hero.jpg);
  /* whatever width of the viewport, it'll always try to fit the element inside of the box */
  background-size: cover;
  /* whatever viewport size the top of the image always stays at the top of the container */
  background-position: top;
  /* specify the polygon in which the element will still be visible */
  /* It will receive four coordinates (x, y) and it's gonna start at the top left corner an then move clockwise  */
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
  position: relative; }
  .header__logo-box {
    position: absolute;
    top: 4rem;
    left: 4rem; }
  .header__logo {
    height: 3.5rem; }
  .header__text-box {
    position: absolute;
    /* center text top, left and transform */
    top: 40%;
    left: 50%;
    transform: translate(-50%, -50%);
    /* center its content */
    text-align: center; }

.section-about {
  background-color: #f7f7f7;
  padding: 25rem 0;
  margin-top: -20vh; }

.section-features {
  padding: 20rem 0;
  background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.8), rgba(40, 180, 133, 0.8)), url(../img/nat-4.jpg);
  background-size: cover;
  margin-top: -10rem;
  transform: skewY(-7deg); }
  .section-features > * {
    transform: skewY(7deg); }
