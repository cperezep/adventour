/*
COLORS:

Light green: #7ed56f
Medium green: #55c57a
Dark green: #28b485

*/

/* Universal selector for normalized the CSS in order to make a cross browser reset */
* {
  margin: 0;
  padding: 0;
  /* Change the box model so the borders and the paddings are no longer added to the total width or height that we specify for a box */
  /* without this, any paddings and borders are added to the height or the width of an element */
  box-sizing: border-box;
}

body {
  font-family: "Lato", sans-serif;
  font-weight: 400;
  font-size: 16px;
  line-height: 1.7;
  color: #777;
  padding: 30px;
}

.header {
  /* 95% of thw viewport height */
  height: 95vh;
  /* linear gradient use the back-image property */
  /* to right bottom css understand that it should begin since left up */
  /* The fourth parameter is the opacity (0.8) in order to see the background image */
  background-image: linear-gradient(
      to right bottom,
      rgba(126, 213, 111, 0.8),
      rgba(40, 180, 133, 0.8)
    ),
    url(../img/hero.jpg);
  /* whatever width of the viewport, it'll always try to fit the element inside of the box */
  background-size: cover;
  /* whatever viewport size the top of the image always stays at the top of the container */
  background-position: top;
  /* specify the polygon in which the element will still be visible */
  /* It will receive four coordinates (x, y) and it's gonna start at the top left corner an then move clockwise  */
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
  position: relative;
}

.logo-box {
  position: absolute;
  top: 40px;
  left: 40px;
}

.logo {
  height: 35px;
}

.text-box {
  position: absolute;
  /* center text top, left and transform */
  top: 40%;
  left: 50%;
  transform: translate(-50%, -50%);
  /* center its content */
  text-align: center;
}

.heading-primary {
  color: #fff;
  text-transform: uppercase;
  margin-bottom: 60px;
}

.heading-primary-main {
  display: block;
  font-size: 60px;
  font-weight: 400;
  letter-spacing: 35px;

  /* Animation require two porperties to work */
  animation-name: moveInLeft;
  animation-duration: 2s;

  /* sets how an animation progresses through the duration of each cycle */
  animation-timing-function: ease-out;

  /* wait for 3s to start the animation */
  /* animation-delay: 3s; */

  /* animation happen three times */
  /* animation-iteration-count: 3; */
}

.heading-primary-sub {
  display: block;
  font-size: 20px;
  font-weight: 700;
  letter-spacing: 17.4px;

  /* Animation require two porperties to work */
  /* animation-name: moveInRight;
  animation-duration: 2s;
  animation-timing-function: ease-out; */

  /* shorthand property */
  animation: moveInRight 2s ease-out;
}

/* Two types of animations in CSS: Keyframes - Transition property */
/* Keyframes */
@keyframes moveInLeft {
  /* specify what i want to happen in each moment of time of the animation */
  /* start */
  0% {
    /* invisible */
    opacity: 0;
    /* Current position to -100px in x axis (move to left side) */
    transform: translateX(-100px);
  }

  80% {
    /* 0 position to 20px in x axis (move to right side) */
    transform: translateX(10px);
  }

  /* finish */
  100% {
    opacity: 1;
    /* translate 0 position */
    transform: translate(0);
  }
}

@keyframes moveInRight {
  /* specify what i want to happen in each moment of time of the animation */
  /* start */
  0% {
    /* invisible */
    opacity: 0;
    /* Current position to -100px in x axis (move to left side) */
    transform: translateX(100px);
  }

  80% {
    /* 0 position to 20px in x axis (move to right side) */
    transform: translateX(-10px);
  }

  /* finish */
  100% {
    opacity: 1;
    /* translate 0 position */
    transform: translate(0);
  }
}

@keyframes moveInBottom {
  0% {
    opacity: 0;
    transform: translateY(30px);
  }

  100% {
    opacity: 1;
    transform: translate(0);
  }
}

/* :link is pseudoclass -> special state of a selector, in this case when it is an anchor element */
/* visited when a user has visited a link (purple color default) */
.btn:link,
.btn:visited {
  text-transform: uppercase;
  text-decoration: none;
  /* two values means top-bottom and left-right */
  padding: 15px 40px;
  display: inline-block;
  border-radius: 100px;
  /* All the properties are enabled to be animated (in this case hover and active) */
  /* It's the initial state */
  transition: all 0.2s;
  position: relative;
}

.btn:hover {
  transform: translateY(-3px);
  /* first: offset in x direction, second: offset in y direction */
  /* third: blur, fourth: color */
  box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
}

/* state when click the button */
.btn:active {
  transform: translateY(-1px);
  box-shadow: 0 5px 10px rgba(0, 0, 0, 0.2);
}

.btn-white {
  background-color: #fff;
  color: #777;
}

/* pseudo-elements allow us to style certain parts of elements */
/* after pseudo-element adds like a virtual element right after the element */
/* add an element that looks exactly like the element but it's behind the element */
.btn::after {
  /* always necessary */
  content: "";
  /* the after element is a child of element */
  display: inline-block;
  width: 100%;
  height: 100%;
  border-radius: 100px;
  position: absolute;
  top: 0;
  left: 0;
  z-index: -1;
  transition: all 0.4s;
}

.btn-white::after {
  background-color: #fff;
}

.btn:hover::after {
  transform: scaleX(1.4) scaleY(1.6);
  opacity: 0;
}

.btn-animated {
  /* animation delay last property */
  animation: moveInBottom 0.5s ease-out 0.75s;
  /* styles up to 0%(in animation) before the animations start */
  animation-fill-mode: backwards;
}
