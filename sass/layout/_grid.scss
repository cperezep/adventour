.row {
  // One of the standars is to make it 1140px grid
  // width: 114rem;
  // The problem with the <div> above occurs when the browser window is smaller than the width of the element. The browser then adds a horizontal scrollbar to the page.
  // Using max-width instead, in this situation, will improve the browser's handling of small windows. This is important when making a site usable on small devices
  // max-width: $grid-width;
  display: flex;
  justify-content: space-around;
  flex-wrap: wrap;

  // All except the last child
  &:not(:last-child) {
    margin-bottom: $gutter-vertical;

    @include respond(tab-port) {
      margin-bottom: $gutter-vertical-small;
    }
  }

  @include respond(phone) {
    flex-direction: column;
    align-items: center;
  }

  // Selector to get all elements in which the class attr starts with the symbol "col-"
  [class^="col-"] {
    &:not(:last-child) {
      @include respond(tab-port) {
        margin-bottom: $gutter-vertical-small;
      }
    }
  }

  .col-1-of-2 {
    // calc() is CSS functions for make calculations using mix units
    // #{} using sass variable
    width: calc((100% / 2) - #{$gutter-horizontal});

    @include respond(tab-port) {
      width: calc(100% - #{$gutter-horizontal});
    }
  }

  .col-1-of-3 {
    width: calc((100% / 3) - #{$gutter-horizontal});

    @include respond(tab-port) {
      width: calc(100% - #{$gutter-horizontal});
    }
  }

  .col-2-of-3 {
    width: calc(
      2 * ((100% - 2 * #{$gutter-horizontal}) / 3) + #{$gutter-horizontal}
    );
  }

  .col-1-of-4 {
    width: calc((100% / 4) - #{$gutter-horizontal});

    @include respond(tab-port) {
      width: calc((100% / 2) - #{$gutter-horizontal});
    }
  }

  .col-2-of-4 {
    width: calc(
      2 * ((100% - 3 * #{$gutter-horizontal}) / 4) + #{$gutter-horizontal}
    );
  }

  .col-3-of-4 {
    width: calc(
      3 * ((100% - 3 * #{$gutter-horizontal}) / 4) + (2 * #{$gutter-horizontal})
    );
  }
}
